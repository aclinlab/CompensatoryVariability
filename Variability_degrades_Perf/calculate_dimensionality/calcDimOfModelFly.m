% This script can be used to reproduce Fig 3B, S2C - calculate the
% dimensionality of a model instantiation loaded from a saved .mat file

clear 
clc

n = 2000;
numFlies = 50;
mulOd = 50000;
% CL_values = [0.1 0.9];
CL_values=[0.9];
numCLs = length(CL_values);
[dim_random, dim_homog] = deal(zeros(numFlies, numCLs));

load('hallem_olsen.mat');
% load('SparsestKCs_ind_for_Dim_Calc.mat');
load('SpecialisedKCs_ind_for_Dim_Calc.mat');

PN = hallem_olsen(1:110,:)';
PNs=zeros(24,mulOd);
% get 1000 odors from the 110 PNs
%% create artificial odors, mulOd odors

for Pn=1:24
    [prob,bins]=hist(PN(Pn,:),100);
    prob=prob/sum(prob);
    binsAll(Pn,:) = bins;
    
    PNs(Pn,:)=randsample(bins,mulOd,'true',prob);
end
% add noise
PNs = PNs + getPNStdevBhandawat(PNs).*randn(size(PNs));


%% recover the rescaling factors from the original PNs used to tune the coding level
% replace this line with the .mat file storing the variable 'PNtrials'
% which provided the inputs used to tune the coding level of the model for
% which you are measuring the dimensionality

load('CL_performance_random_homog20_0.1_1.mat');
PNs_1_=PNtrials(:,:,1);
% get the maximum bin center for each PN derived from the original
% Hallem-Olsen data
maxRespBinPerPN = max(binsAll,[],2);

% get the maximum response in the rescaled randomly resampled PNs
maxRespPNsRescaledPerPN = max(PNs_1_,[],2);

PNsAboveBestFit = true(24,1);

% In this while loop:
% draw a best fit line comparing the maximum response in the rescaled
% randomly resample PNs to the maximum bin center for each PN in the
% original H-O data. Most PNs will match, but in some PNs, by random chance
% they will not have sampled the top response in 100 odors. These PNs will
% be below the best fit line, while the "matching" PNs will be above. On
% the next iteration of the while loop, redraw the best fit using only the
% PNs that lie above the best fit line from the current iteration
% continue until none of the PNs are above the best fit line (because they
% lie on it almost exactly)

while sum(PNsAboveBestFit)
    sum(PNsAboveBestFit)
    
    p = polyfit(maxRespBinPerPN(PNsAboveBestFit), maxRespPNsRescaledPerPN(PNsAboveBestFit),1);
    
    % the correct PNs will be above the best fit line because the incorrect PNs
    % are outliers that drag down the line of best fit
    PNsAboveBestFit = maxRespPNsRescaledPerPN > ( maxRespBinPerPN*p(1) + p(2) +0.000001);
    % the 0.000001 is for rounding errors, otherwise you end up in endless
    % loops
    
end

%% plot the data and the best fit line to confirm it passes through the correct PNs
figure,scatter(maxRespBinPerPN,maxRespPNsRescaledPerPN);
hold on
xrange = [min(binsAll(:)) max(binsAll(:))];
plot(xrange, p(1)*xrange + p(2))

%% apply the original scaling to the new fictitious odors
PNs = PNs*p(1) + p(2); 
PNs(PNs<0) = 0;

%% simulate activity for fictitious odors, calculate dimensionality
for fly = 1:numFlies
    fly
    for CL_i = 1:numCLs
        CL_values(CL_i)
        tic
        % replace this line with the .mat files storing the model
        % parameters - would be generated by varDegradesPerf.m for Fig2B,C
        % or Perf_AtNonSparseCodingRegime_Random_HomogModels.m for Fig2E

        filename = strcat('CL_performance_random_homog20_',num2str(CL_values(CL_i)),'_',num2str(fly),'.mat');
        load(filename);
        
        random_resp = getKCactivity(thisW, PNs, APLgainP(1), thetaS);
        disp(nnz(random_resp)/(size(PNs,2)*size(PNs,3)*n));
        homog_resp = getKCactivity(thisW_HomogModel, PNs, APLgainP(2), repmat(thetaH_Ftheta,n,1));
        disp(nnz(homog_resp)/(size(PNs,2)*size(PNs,3)*n));
        
        toc
        
        %% this piece is for amputating the top 10% sparsest KCs with always active
        %% always silent cells.
%         Y_rem_sparseKCs=random_resp;
%         YHomog_rem_sparseKCs=homog_resp;
%         
%         Y_rem_sparseKCs(Spar_rand_ind(:,fly),:)=[];
%         YHomog_rem_sparseKCs(Spar_homog_ind(:,fly),:)=[];
%         
%         CL_rem_sparseKCs= mean(sum(Y_rem_sparseKCs>0)./1800);
%         CL_Homog_rem_sparseKCs=mean(sum(YHomog_rem_sparseKCs>0)./1800);
%         
%         % number of useless always active KCs= 9(1-CL)*200
%         KCs_alwaysActiv=round((9*(1-CL_rem_sparseKCs))*200);
%         Homog_KCs_alwaysActiv=round((9*(1-CL_Homog_rem_sparseKCs))*200);
%         
%         KCs_silent=200-(KCs_alwaysActiv);
%         Homog_KCs_silent=200-Homog_KCs_alwaysActiv;
%         %
%         ValueMax=max(random_resp(:));
%         ValueMax_H=max(homog_resp(:));
%         
%         random_resp(Spar_rand_ind(:,fly),:)=[];
%         homog_resp(Spar_homog_ind(:,fly),:)=[];
%         
%         random_resp(end+1:end+KCs_alwaysActiv,:)=repmat(ValueMax.*ones(1,mulOd),KCs_alwaysActiv,1);
%         homog_resp(end+1:end+Homog_KCs_alwaysActiv,:)=repmat(ValueMax_H.*ones(1,mulOd),Homog_KCs_alwaysActiv,1);
%         
%        random_resp(end+1:end+KCs_silent,:)=repmat(zeros(1,mulOd),KCs_silent,1);
%        homog_resp(end+1:end+Homog_KCs_silent,:)=repmat(zeros(1,mulOd),Homog_KCs_silent,1);
%         

        %% this piece is for amputating the top 5% specialised KCs with always active
        %% always silent cells.
%        
%         Y_rem_sparseKCs=random_resp;
%         YHomog_rem_sparseKCs=homog_resp;
%         
%         Y_rem_sparseKCs(Spec_rand_ind(:,fly),:)=[];
%         YHomog_rem_sparseKCs(Spec_homog_ind(:,fly),:)=[];
%         
%         CL_rem_sparseKCs= mean(sum(Y_rem_sparseKCs>0)./1900);
%         CL_Homog_rem_sparseKCs=mean(sum(YHomog_rem_sparseKCs>0)./1900);
%         
%         % number of useless always active KCs= 9(1-CL)*100
%         KCs_alwaysActiv=round((9*(1-CL_rem_sparseKCs))*100);
%         Homog_KCs_alwaysActiv=round((9*(1-CL_Homog_rem_sparseKCs))*100);
%         
%         KCs_silent=100-(KCs_alwaysActiv);
%         Homog_KCs_silent=100-Homog_KCs_alwaysActiv;
%         %
%         ValueMax=max(random_resp(:));
%         ValueMax_H=max(homog_resp(:));
%         
%         random_resp(Spec_rand_ind(:,fly),:)=[];
%         homog_resp(Spec_homog_ind(:,fly),:)=[];
%         
%         random_resp(end+1:end+KCs_alwaysActiv,:)=repmat(ValueMax.*ones(1,mulOd),KCs_alwaysActiv,1);
%         homog_resp(end+1:end+Homog_KCs_alwaysActiv,:)=repmat(ValueMax_H.*ones(1,mulOd),Homog_KCs_alwaysActiv,1);
%         
%         random_resp(end+1:end+KCs_silent,:)=repmat(zeros(1,mulOd),KCs_silent,1);
%         homog_resp(end+1:end+Homog_KCs_silent,:)=repmat(zeros(1,mulOd),Homog_KCs_silent,1);
       
        %%
        
        tic
        dim_random(fly,CL_i) = dimInputCurrent(Calc_C(random_resp));
        dim_homog(fly,CL_i) = dimInputCurrent(Calc_C(homog_resp));
        toc
    end
end

save('dim_random_20.mat','dim_random');
save('dim_homog_20.mat','dim_homog');

%  save('dim_random_20_top10percent_sparsest_remv.mat','dim_random');
% save('dim_homog_20_top10percent_sparsest_remv.mat','dim_homog');

% save('dim_random_20_top5percent_specialised_remv.mat','dim_random');
% save('dim_homog_20_top5percent_specialised_remv.mat','dim_homog');


function Y = getKCactivity(w, PNtrials, APLgain, theta)
odors = size(PNtrials,2);
numTrials = size(PNtrials,3);
n = size(w,2);
[Activations,Y]=deal(zeros(n,odors*numTrials));
for trial = 1:(odors*numTrials)
    
    Activations(:,trial) = w'*PNtrials(:,trial );
%     resp = Activations(:,trial)-APLgain*repmat(sum(Activations(:,trial),1),n,1)-theta;
%     resp(resp<0) = 0;
%     Y(:,trial)=resp;
    Y(:,trial)=(( Activations(:,trial)-APLgain*repmat(sum(Activations(:,trial),1),n,1)-theta)>0 ).*( Activations(:,trial)-APLgain*repmat(sum(Activations(:,trial),1),n,1)-theta);
end

end
